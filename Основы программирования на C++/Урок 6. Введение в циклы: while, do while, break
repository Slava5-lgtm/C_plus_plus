Урок 6.                                 Введение в циклы: while, do while, break

                                                        Разбор ДЗ прошлого урока.

                                                                ЗАДАЧА -1       (Програма ввыводит слово рубли в правильном падиже в зависимости от введеного числа)

Попробуем сформулировать условиятак что бы было покороче. Когдп мы используем форму слово рублей. Мы будем ее использовать когда, если последния цифра числа это
5, 6, 7, 8, 9 или 0. Но не только в этом случае. Еще когда предпоследния цифра десятков равна единицы например 11, 12, 113, 2014.

Если любое из этих условий выполнено то нужно вывести ответ рублей. Поэтому нам потребуеться оператор ИЛИ. но как проверить последнию цифру числа.
Нужна взять остаток от деления этого числа на 10.

Например: 2019 % 10 (2019 остаток от деления на 10 это 9) это и есть последния цифра этого числа. Пишем условия:

// Если остаток от деления на 10 это 0 ИЛИ остаток от деления на 10 больше больше или равенн 5 то в этом случаи мы выводим ответ n рублей

if (n % 10 == 0 || n % 10 >= 5){        //  Если остаток от деления на 10 это 0 ИЛИ остаток от деления на 10 больше больше или равенн 5
    std::cout << n << " рублей \n";     //  то в этом случаи мы выводим ответ n рублей
}

Еще осталось дописать случай когда предпоследния была равна единицы. Можно отбросить последнию цифру потом проверить то что осталось. Что бы отбросить последнию цифру
нужно поделить число на 10.

например: 2014 / 10 == 201, потом у числа 201 можно взять последнию цифру тоест остаток от деленния на 10 и получится 1. Надо дполнить наше условия

 f (n % 10 == 0 || n % 10 >= 5 || (n / 10) % 10 == 1) {        //  Если остаток от деления на 10 это 0 ИЛИ остаток от деления на 10 больше больше или равенн 5 ИЛИ
                                                                 предпоследния цифра рвна 1 Тоесть число с отброшеной последне цифрой остаток от деления на 10 равен 1
                                                                 чтобы читалось лучше поставим скобки  (n / 10) % 10 == 1
    std::cout << n << " рублей \n";     //  то в этом случаи мы выводим ответ n рублей
 }

Мы разобрали самый сложный способ. Какие остались не разобраные, остлиь не разоброны только два. Либо последния цифра была равна единицы и тогда ответ будет рубль
либо она была  деопазоне от двух до четерех и тогда ответ будет рубля. Второе условия:

  else if (n % 10 == 1) {               // если последния цифра равна еденцы
    std::cout << n << " рубль\n";       // выводим ответ рубль
  }
если последния цифра равна еденцы выводим ответ рубль. И остался последний случай когла последния цифра лежит в деопазоне от двух до четерех и тогда ответ будет рубля
поскольку это последний не разоброный случай писать условия не надо и можно сразу вывести ответ

else {
    std::cout << n << " рубля\n";
  }


#include <iostream>

int main() {
  int n;
  std::cout << "Введите количество рублей:\n";
  std::cin >> n;

  if (n % 10 == 0 || n % 10 >= 5 || (n / 10) % 10 == 1){
    std::cout << n << " рублей\n";
  }  else if (n % 10 == 1) {
    std::cout << n << " рубль\n";
  } else {
    std::cout << n << " рубля\n";
  }
}

                                                                    Резултат

ведите количество рублей:
2011
2011 рублей

                                                                    Резултат

Введите количество рублей:
3333
3333 рубля

                                                                    Результат

Введите количество рублей:
1000000000
1000000000 рублей

                                                                ЗАДАЧА -2       (Грусное не совершенолетия (Нвм с клавиатуре вводят 6 цифр. Сначало день, месц и год
                                                                                 рождения поситителяЮ, а затем текушию дату. Можно ли ему продовать алкоголь))


#include <iostream>

int main() {
  int day;
  int month;
  int year;
  std::cout << "Введите день, месяц и год рождения поситителя: ";
  std::cin >> day >> month >> year;

  int currentYear;
  int currentMonth;
  int currentDay;
  std::cout << "Введите текущий день, месяц и год: ";
  std::cin >> currentDay >> currentMonth >> currentYear; // текущая дата
  
  /* Мы назвали так переменые что бы зать текушию дату (currentDay, currentMonth, currentYear) и ту что нужнопроверить (day, month, year) (сово current обазначает     
     текущий) 
     
     В каком условии можно считать поситителя совершенолетним очевидно если разность между текушим годом и годом рождения равна или больше восемнадцати то точно можно, а       если она меньше восемнадцати то точно нельзя мы можем отбросить эти случаи чтобы не думать о них */

  if (currentYear - year < 18) {        // Если текущий год меньше года рождения
    std::cout << "Нельзя";              // нельзя
  } else if (currentYear - year > 18){  // Если текущий год больше года рождения
    std::cout << "Можно";               // можно
  

    /* Осталось разобрать случай когда эта раззность равна восемнадцати тогда надо проверить был у поситителя в этот день, день рождения ил нет. Как это зделать. Нужно           сравнить текущий месяц и месяц его рождения. Если текущий месяц больше месяцу его рождения тогда сразу да, а если и текушиимесяцы равны тогда проверяем дату
    
    Как записать это одним условием нам пригодяться оба логические оператора И (||) и ИЛИ (&&) */
  } else if (currentMonth > month || currentMonth == month && currentDay > day) {    /* (текуший месяц (currentMonth) , больше месяца рождения (month) ИЛИ (||) теуший                                                                                            месяц равен месяцу рождения (currentMonth == month) И (&&) текущий день больше дня                                                                                         рождения (currentDay > day)
                          чтобы легчи читать это длиное условия возмем взять его в скобки else if (currentMonth > month || (currentMonth == month && currentDay > day)) */
    std::cout << "Можно";                                                            // В этом случае ответ можно

    // Остался последний случай когды в этом году поситителю должно исполниться восимнадцать но еще не мсполнилось но посколько все остольные случаи мы уже перебрали то         как обычно последие условия можно не проверять:
    
  } else {
    std::cout << "Нельзя";  // Просто выводим ответ Нельзя
  }
}

                                                                    Результат
Введите день, месяц и год рождения поситителя: 19 2 1994
Введите текущий день, месяц и год: 19 2 2012
Нельзя

                                                                    Результат

Введите день, месяц и год рождения поситителя: 
19 2 1994 
Введите текущий день, месяц и год: 5 8 2012
Можно

                                                                    Результат

Введите день, месяц и год рождения поситителя: 19 2 1994
Введите текущий день, месяц и год: 1 1 3000
Можно


                                         ЦИКЛЫ WHILE, DO WHILE (while, do while)

Прежде чем приступить к новой теме посмотрим программы крторые мы научились писать. Сначала все наши програмы состояли из последуших команд которые мы писали друг за
другом через точку с запятой. И выполнения такой програмы могло идти одним путем строчка за строчкай компютер выполнял все наши команды одну за другой не чего не
пропуская и не перескакивая такие програмы называються - ЛИНЕЙНЫМИ. Это названия происходит от того, что програму можно изоброзит в виде цепочки команд выстроиных в
одну линию путь выполнения такой програмы едиственно возможный не каких отклонений у нее не допускаеться

                                                НАПРИМЕР: Линейный алгоритм

                                                        Действие 1
                                                            |
                                                            |
                                                            | 
                                                        Действие 2
                                                            |
                                                            |
                                                            | -> 
                                                        Действие 3
                                                            |
                                                            |
                                                        Действие 4 

Потом мы научилиь менять поведения наших програм в зависимости от тех или иных условий. В таких програмах выполния может идти уже разными путями. Например если
пользователь введет одно число то будет выполняться одни команды, а если другое число то другие команды. Такие програмы иногда называються разветвлеными.
Если изоброзить такую програму в виде схемы то можно увидитю что, путь выполнения этой програмы в какойто моиент раздваиваеться потом он может раздваиться еще и еще
раз. Эти моменты когда путь выполнения програмы раздваиваються называються ВЕТВЛЕНИЕМ, а сами пути которые приэтом получаються называються ВЕТКАМИ. Например: если в
нашей програми было условия a > b, то у нас оброзуеться две ветки. Одна на услучай если это условие было выполнина и другая  на случай если условие было не выполнино.
У таких программ уже не один, а несколько возможных результатов выполнения потомучто в завиимсти введеных даных выполнения программы может пойти по разным веткам.

                                                НАПРИМЕР: Разветвляющийся алгоритм


                                                      Действие 1
                                                          |
                                                          |
                                    ----------------Проверка условия----------
                                    |                                        |
                                    |                                        |
                                    |                                        |
                                    |                                        |
                                    |                                        |
                                Действие 2                              Действие 3
                                    |                                        |
                                    |                                        |
                                    |                                        |
                                    ------------------------------------------
                                                          |
                                                          |
                                                      Действие 4

Но оказываеться что большенство задач нельзя решить ни линейными ни развлетвлеными алгоримоми. Дело в ом что их выполнения может идти только сверху вниз. Но очень часто
бывает необходимо вернутся н несколько строк вверх и повторить все еще раз начиная с некоторого места.
Поэтому мы разучим еще одну канструкцию которая как раз позволяет это делать. Такая конструкция называеться: Циклом, а програма которая ее содержит называеться:
ЦИКЛИЧЕСКИМи

                                               НАПРИМЕР: Циклический алгоритм 

                                                      Действие 1
                                                          |
                                                          |
                                              ----->Проверка условия-----
                                              |           |             |
                                              |           |             |
                                              |       Действие 2        |
                                              |           |             |
                                              |           |             |
                                              |-------Действие 3        |
                                                                        |
                                                                        |
                                                                        |
                                                          ---------------
                                                          |
                                                          |
                                                          \/
                                                      Действие 4

Все програмы которые мы использум в жизни это циклические програмы расмотрим простой пример


                                                                ЗАДАЧА -3       (Ввести пароль компьютера если не правильный идет сообщения и сново просит ввести пароль
                                                                                 и так повторяется пока не введешь правильный пароль)


 #include <iostream>

int main() {
  std::string password;
  std::cout << "Введите пароль: ";
  std::cin >> password;

  while (password != "12345") {
    std::cout << "Введите пароль:\n";
    std::cin >> password;
  }
  std::cout << "Пароль верный!\n";
}

                                                                    Результат

Введите пароль: 1
Введите пароль:
12
Введите пароль:
123
Введите пароль:
1234
Введите пароль:
65412
Введите пароль:
12345
Пароль верный!