Урок 7.                                        Циклы for и алгоритмы на циклах

                                                    Циклы for и алгоритмы на циклах

                                                        ЗАДАЧА - 1  Число Фибоначчи (Сначала две единицы, а каждое число равно сумме двух предыдущих)


Числами Фибоначчи называют элементы числовой последовательности. В ней каждое следующее число в ряду получается суммированием двух предыдущих чисел. Пример последовательности:
1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987 ( ноль плюс один равно один, один плюс один равно двум, два плюс один равно трём, три плюс дав равно пяти
И.Т.Д.).
Здесь мы видим двенадцать чисел последовательности 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144. Не будем уточнять зачем нужны числа Фибоначчи. В математике некоторые веши
существуют просто потому, что могут существовать. Здесь мы видим что сначала цифры увеличиваются не очень быстро, то потом последовательность резко возрастает и сказать на
перед чему равно например двадцать пятое число последовательности мы не сможем пока не рассчитаем все число которые идут до него.

Для этого мы и хотим написать программу.И так как бы мы ее писали? По условию пользователь будет вводить какое число Фибоначчи по счету хочет увидит.

/* Пускай он вводит это в переемную n. */
#include <iostream>

int main() {

   // Создадим ее
  int n;
  
   //Добавим подсказку чтобы пользователь понял, что от него хотят
  std::cout << "Какое число по счету вы хотите узнать? ";

   //Теперь ждем пока он введет
  std::cin >> n;

   /*Теперь подумаем что нам делать дальше. Ну допустим пользователь ввел десять. Каким будет десятое число последовательности?
    Так как каждое число зависит от двух прошлых, видимо нам придется узнать сначала все прошлые числа по порядку. От первого до девятого и тогда осениться сложить девятое и восьмое что бы
    получить десятое. Напрашивается цикл из десять шагов. На каждом шаге вычислявшие число Фибоначчи, точнее не десять шагов, а n шагов смотря что ввел пользователь. Мы уже знаем что делать
    в таких случаях. Заведем счетчик итераций чтобы понять когда остановиться.
    
    Называем его например counter и он будет равен нулю.*/ 
  int counter = 0;  // если нам нужно десять чисел. То мы бы писали вот такое условия для цикла while. waile (counter < 10) но нам нужно n чисел 

  int curentNumber;  / Для вычисления очередного числа давайте заведем переемную curentNumber.
  
  /* Также заведем переемную для предыдущего числа и предпредсущего числа. Какие изначальные значения выставлять для переемных previousNumber и  prevPreviousNumber. Они используются
  только начиная с третьего числа последовательности и в этом случае они равны первым двум числам, а это как мы помним единицы поэтому иценелизируем их единицами     int previousNumber,
  prevPreviousNumber = 1; */

  int previousNumber = 1, prevPreviousNumber = 1;

  while (counter < n){     /* поэтому место десяти пишем n мы помним что первые два числа в последовательности Фибоначчи равны единицы это особый случай. 
  
    Поэтому задаем внутри цикла проверку 
    
       Если (if) counter меньше 2 */ 
    if (counter < 2) {
      curentNumber = 1;  //то числа будут равны единице
    //в противном случае мы будем  рассчитывать их как сумму двух последних чисел
    
    } else { /* Ну а во всех остальных случаях curentNumber будет вычисляться как сумма previousNumber плюс prevPreviousNumber */
      curentNumber = previousNumber + prevPreviousNumber;
    }

   /* В задачи требуется вывести только указоное по счету число но давайте скачало будем выводить каждое число последовательности чтобы проверить что наш алгоритм правильно вычисляет их
   все.
   Для этого в цикле добавим вывод текста ну точней не текста а нашего числа через пробел что бы они не сливались вмести */

    std::cout << curentNumber << " ";

    /* Основное сделано. Не забудем инкриминировать счетчик итераций */

    counter++;

    /* Вроде все*/
  }

} 

// Давайте  запустим и проверим.

                                                                  Результат

Какое число по счету вы хотите узнать? 5
1 1 2 2 2 

/* Идут одни двойки к чему это. Надо поискать где у нас вычисляется текущие число.
Вот здесь

curentNumber = previousNumber + prevPreviousNumber;

И зависимости от этих двух previousNumber  prevPreviousNumber переменных. В самом начале они равны единицы а их сумма равна двойки, которая и выводиться на каждом шаге цикла видимо в этом и
есть наша проблема. В эти переменные должны попадать последнии два числа. На первом шаге это единицы но уже а втором это должна быть единица и двойка на третям двойка и тройки и.т.д. Ведь на
на каждом шаге мы должны двигаться вперед и то что сначала было текущим числом станет предыдущим, а то что было прешедшим стонет предпредедущим. А мы сейчас не обновляем эти переемные в
цикле что бы это сделать добавим присваивание то что было предпредедущим числом стирается и на его место записывает то что было предыдущим числом

prevPreviousNumber = previousNumber;

#include <iostream>
int main() {
  int n;
  std::cout << "Какое число по счету вы хотите узнать? ";
  std::cin >> n;
  int counter = 0;
  int curentNumber; 
  int previousNumber = 1, prevPreviousNumber = 1;
    if (n <= 0 ) {
    std::cout << "Изведите порядковый номер число должен быть больше нуля\n";
  }
  while (counter < n) {     
    if (counter < 2) {
      curentNumber = 1;  
    } else {
      curentNumber = previousNumber + prevPreviousNumber;
    }
    std::cout << curentNumber << " ";
    counter++;
    prevPreviousNumber = previousNumber;

    /* А прешедшие число это то что было текшим число */

    previousNumber = curentNumber;

    /* Мы пишем это в конце цикла для того чтобы подготовить наши числа к следушей итерации. В которой они опять сложится и полученная сумма даст нам уже новое число в последовательности
    */
  }
} 

// Давайте снова запустим и посмотрим что будет.

                                                                  Результат

Какое число по счету вы хотите узнать? 5
1 1 2 3 5 

                                                                  Результат

Какое число по счету вы хотите узнать? 10
1 1 2 3 5 8 13 21 34 55 

Вроде все получилась ну и напоследок посмотрим какое нибудь большое число ну например 100

                                                                  Результат


Какое число по счету вы хотите узнать? 100
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817
39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 -1323752223 512559680 -811192543 -298632863 -1109825406 -1408458269 1776683621 368225352 2144908973
-1781832971 363076002 -1418756969 -1055680967 1820529360 764848393 -1709589543 -944741150 1640636603 695895453 -1958435240 -1262539787 1073992269 -188547518 885444751 696897233 1582341984
-2015728079 -433386095 1845853122 1412467027 -1036647147 375819880 -660827267 -285007387 -945834654 -1230842041 2118290601 887448560 -1289228135 -401779575 -1691007710 -2092787285 511172301
-1581614984 -1070442683 1642909629 572466946 -2079590721 -1507123775 708252800 -798870975 -90618175 -889489150 -980107325

И что мы видим какие то отрицательные числа полезли но их не может быть мы складываем только положительные числа. Попробуем поменьше число например

                                                                  Результат

Какое число по счету вы хотите узнать? 46
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817
39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903

Еще работает, а 47

Какое число по счету вы хотите узнать? 47
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817
39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 -1323752223

Уже нет это происходит потому что переемная int не может хранить слишком большие числа, а именно больше сем два миллиарда с небольшим. А сумма этих двух здоровенных чисел получается больше и
наша переемная curentNumber не может уже все вместить значит исправим код больше нуля и не больше 46



#include <iostream>
int main() {
  int n;
  std::cout << "Какое число по счету вы хотите узнать? ";
  std::cin >> n;
  int counter = 0;
  int curentNumber; 
  int previousNumber = 1, prevPreviousNumber = 1;
  if (n <= 0 || n >= 46) {
    std::cout << "Извините порядковый номер число должен быть больше нуля\n";
  } else {
    while (counter < n) {     
      if (counter < 2) {
        curentNumber = 1;  
      } else {
        curentNumber = previousNumber + prevPreviousNumber;
      }
      std::cout << curentNumber << " ";
      counter++;
      prevPreviousNumber = previousNumber;
      previousNumber = curentNumber;
      }
  }
} 

// Давайте снова запустим и посмотрим что будет.

                                                                  Результат

Какое число по счету вы хотите узнать? 46
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817
39088169 63245986 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903


/* Нам не надо выводить все число Фибоначчи, а нужно вывести только одно n число оно как раз остаться в переменой curentNumber после того как последние итерация цикла завершилось. Поэтому
просто выведем на экран curentNumber после цикла, а вывод внутри цикла удалим   
      std::cout << curentNumber << " "; */

#include <iostream>
int main() {
  int n;
  std::cout << "Какое число по счету вы хотите узнать? ";
  std::cin >> n;
  int counter = 0;
  int curentNumber; 
  int previousNumber = 1, prevPreviousNumber = 1;
  if (n <= 0 || n > 46) {
    std::cout << "Извините порядковый номер число должен быть больше нуля и меньше 47\n";
  } else {
    while (counter < n) {     
      if (counter < 2) {
        curentNumber = 1;  
      } else {
        curentNumber = previousNumber + prevPreviousNumber;
      }

      counter++;
      prevPreviousNumber = previousNumber;
      previousNumber = curentNumber;
    }

    std::cout << "Число Фибоначчи: " << curentNumber << " \n";
  }
} 

// Давайте снова запустим и посмотрим


                                                                  Результат


Какое число по счету вы хотите узнать? 10
Число Фибоначчи: 55

Все работает. Закончил смотреть урок Видеозапись 1 Циклы for и алгоритмы на циклах