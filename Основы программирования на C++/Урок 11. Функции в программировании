Урок 11.                                Функции в программировании

                                                Определение функций

                                                        Код distance


#include <iostream>

float distance(float sec)
{
  return 9.81f * sec * sec / 2; 
}

int main()
{
  for (float t = 0.0f; t <= 5.0f; t += 0.5f)
  {
    std::cout << t << " " << distance(t) << std::endl;
  }
}

                                                        Код max 

 #include <iostream>

int max_t(int a, int b)
{
  return a > b ? a : b; 
}

int max3_t(int a, int b, int c)
{
  return a > b ? (a > c ? a : c) : (b > c ? b : c);
}

int max(int a, int b)
{
  if (a > b)
    return a;
  else
    return b;
}

int max3(int a, int b, int c) 
{
  return max(max(a, b), c); 
}

int main() 
{
  int a = 1;
  int b = 2;
  int c = 3;
  
  std::cout << max(a, b) << std::endl;
  std::cout << max3(a, b, c) << std::endl;
  
  std::cout << max_t(a, b) << std::endl;
  std::cout << max3_t(a, b, c) << std::endl;
}


                                                Код equal

#include <iostream>

int main()
{
	int a = 3;
  int b = 3;
  int c = 3;

  if(a == b && b == c)
  {
    std::cout << "Equal!" << std::endl;
  }
}

                                              Использование функций

                                                        Код substring

#include <iostream>

/* Поиск подстроки в строке */

bool is_match(std::string text, std::string word, int startPos) {
  for (int i = 0; i < word.length(); ++i) {
    if (i + startPos >= text.length() || word[i] != text[i + startPos]) {
      return false;
    }
  }
  return true;
}

int find(std::string text, std::string word) {
  for (int startPos = 0; startPos < text.length(); ++startPos) {
    if (is_match(text, word, startPos)) {
      return startPos;
    }
  }
  return -1;
}

void found() { std::cout << "Found!" << std::endl; }

int main() {
  std::string text;
  std::string word;

  std::cin >> text;
  std::cin >> word;

  if (find(text, word) >= 0) {
    found();
  }
}

                                                        Код simplenumbers

#include <iostream>

/* Простые числа */

// Функция подсчёта простых чисел
bool isPrime(int n) {
    if (n == 1)
        return false; // если число 1

    for (int d = 2; d * d <= n; d++)
    {
        if (n % d == 0)
        {
            return false; // если делитель был найден
        }
    }
    return true;
}

int main()
{
    int a, b;
    std::cout << "Range:" << std::endl;
    std::cin >> a >> b;

    int count = 0;
    for (int i = a; i <= b; ++i)
    {
        if(isPrime(i))
            count++;
    }
    std::cout << "Count:" << count << std::endl;
}

                                                Функции для работы со строками

                                                        Код palindrome

#include <iostream>

/* Палиндром */

std::string reversed(std::string str)
{
    int len = str.length();
    int n = len - 1;
    for(int i = 0; i < (len / 2); i++)
    {
        std::swap(str[i], str[n]);
        n = n - 1;
    }
    return str;
}

int main()
{
    std::string word;
    std::cin >> word;
    if(word == reversed(word))
    {
        std::cout << "Palindrome!" << std::endl;
    }
}

                                                        Код rfind

                                                      
#include <iostream>

/* Поиск подстроки в обратном порядке */

int rfind(std::string str, std::string substr) {
  for (int i = str.length() - substr.length(); i >= 0; --i) {
    bool equal = true;
    for (int j = 0; j < substr.length(); ++j) {
      if (str[i + j] != substr[j]) {
        equal = false;
      }
    }
    if (equal)
      return i;
  }
  return -1;
}

int main() {
  std::string word;
  std::string text;
  std::cin >> text;
  std::cin >> word;

  std::cout << "Rfind:" << rfind(text, word) << std::endl;
}

                                                        Код rfindversion

#include <iostream>

/* Поиск подстроки в обратном порядке через функцию find */

bool is_match(std::string text, std::string word, int startPos) {
  for (int i = 0; i < word.length(); ++i) {
    if (i + startPos >= text.length() || word[i] != text[i + startPos]) {
      return false;
    }
  }
  return true;
}

int find(std::string text, std::string word) {
  for (int startPos = 0; startPos < text.length(); ++startPos) {
    if (is_match(text, word, startPos)) {
      return startPos;
    }
  }
  return -1;
}

std::string reversed(std::string str) {
  int len = str.length();
  int n = len - 1;
  for (int i = 0; i < (len / 2); i++) {
    std::swap(str[i], str[n]);
    n = n - 1;
  }
  return str;
}

int rfind(std::string str, std::string substr) {
  return str.length() -
         (find(reversed(str), reversed(substr)) + substr.length());
}

int main() {
  std::string word;
  std::string text;
  std::cin >> text;
  std::cin >> word;

  std::cout << "Rfind:" << rfind(text, word) << std::endl;
}

                                                Подробнее о типах и приведениях между ними

                                                        Код conversion

#include <cstdlib>
#include <iostream>

int main()
{
  {
    int a = 10;
    float b = (float)a;    
  }
  
  {
    int c = 'a';
    int x = (int)c;  

    std::cout << x << std::endl;
  }

  {
    int x = 98;
    char c = (char)x;

    std::cout << c << std::endl;    
  }

  {
    bool b = true;
    int x = (int)b;

    std::cout << x << std::endl;
  }

  {
    int x = 0;
    bool b = (bool)x;    

    std::cout << b << std::endl;
  }

  {
    int x = -100;
    bool b = (bool)x;    

    std::cout << b << std::endl;
  }
}