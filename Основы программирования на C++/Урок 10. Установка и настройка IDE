                                      Установка и настройка IDE

                                                УСТОНОВКА КОМПИЛЯТОРА.

Для устоновки компилятора надего скачать. Открываем браузер и поесковой строке набераем mingw - w64 (или https://www.mingw-w64.org/downloads/ ). В результате поиска переходим н вкладку Downloas.
Перейдем на вкладку MingW-W64-buils.Перейдем на сайт GitHub. В появившемся окне в нижней части выбираем версию компилятора котороя подходит под мою ОС (i686 - преднознаена для 32 разрядных
систем) у меня 64- разрядная система, процесор х64 (значит х86_64) скачиваем. Открываем папку загрузки. С помоши архиватора 7-Zip распоковываем архив. Теперь необходимо скопировать архив
mingww64 на диск (С). Для этого п.к.м. нажимаем на папки в контекстном меню выбираем выризать переходим на дииск (С) вставляем. Все наш компилчтор устоновлен.

                                                НАСТРОЙКА КОМПЕЛЯТОР.

П.К.М на ярлыке Мой компьютер -> Свойство -> Дополнительные параметры системы (правый угол) -> Переменые среды -> Добовляем путь к компеляторы в Системные переменные, а точнее в переменую Path
для этого вбираем переменую л.к.м. -> Изменить -> Создать -> Добвляем новый путь -> Обзор -> Этот компьютер -> Локальный диск (С) -> Открываем папку в которой устоновлен компилятор ->
И в устоновленой папкевыбераем папку bin -> Всегда ОК ->

                                                ПРОВЕРКА РАБОТЫ КОМПЕЛЯТОРА.

Перед устоновки среды разроботки нам нужно убедиться что копелятор устоновлен правильно. Для этого нужно скомпелировать простой код. Запустим комадную строку. Проше сео это зделать набрать на
клавиатуре: виндовс+R -> cmd -> переходим на Диск С (cd C\: Enter) -> Создаем папку develop (mkdir develop) -> Переходим в папку develop (cd develop) -> Создаем проект с названием test (mkdir
test) -> Переходим в папку test (cd test) -> Теперь нам нужно создать файл с исходным кодом можно сделать это с помошю стордатного блокнота для этого необходимо нобрать (notepad test.cpp) либо
использовать стороний редактор например vim ->Для этого набераем (vim test.cpp) -> И пишим код нашей програмы:

#include <iostream>

int main() {
  std::cout << "Hello World!\n";
  return 0;
 }
 
 Сщхроняем изменения -> Пробуем скомпилировать то что мы собрали для этого набираем (g++ (название исходного файла в нашем случае) test.cpp -o (и далее имя исполныяемого файла у нас это будит)
 test.exe) -> Должно появиться следушее (C:\develop\test>) это значит компилятор сработал ошибок не найдено -> Пробуем запустить файл (C:\develop\test>test.exe) -> Если на экрне выйдет наддпись
 которую мы хотели вывести отоброзилась (Hello World!) значит компиляция сработала компилятор устоновлен правильно.

                                                УСТОНОВКА VSCode И РАСШИРЕНИЯ ДЛЯ ЯЗЫКА С++

Скачиваем VSC в окне Устоновка - Microsoft Visual Studio Code (Выберите дополнительные задачи (отмчаем все пункты)). Устоновить. Теиерь выбераем папку в которой написан исходный код написан на
С++. Я для этого буду использовать код которым проверял работу компелятора


                                                        УСТОНОВКА КОМПИЛЯТОРА. КОМАДНАЯ СТРОКА И КОМПЕЛЯТОР.

Что вы узнаете
Поговорим, как установить компилятор и среду разработки VS Code и скомпилировать исходный код в терминале. До этого вы полностью писали и запускали код на платформе replit. Она хорошо
притворяется настоящим компилятором, но у неё есть недостатки:
● проблемы при работе с многопоточным кодом;
● невозможность подключить внешние библиотеки, которые не поддерживаются replit (Boost, cpr, json);
● невозможность создавать сложные проекты.
Если разрабатывать только простые проекты, не содержащие внешних зависимостей, то replit подойдёт, но вряд ли хоть одна компания использует его для коммерческих продуктов. А значит, пришло
время начать работать с инструментами для настоящих разработчиков. Начнём с компилятора.

                                    Компилятор

Для Windows будем использовать компилятор Mingw-w64. Если у вас другая ОС, можете пропустить этот шаг. Компилятор Mingw-w64 распространяется по лицензии GNU GPL. Это значит, что его можно
бесплатно использовать в учебной и коммерческой разработке. Так как компилятор распространяется в виде 7z-архива, перед его установкой надо установить архиватор 7zip, который можно скачать по
адресу: 7-zip.org/download.
Архиватор бесплатный и не требует регистрации, нужно только выбрать версию для вашей операционной системы.
Как определить версию операционной системы Windows: Нажмите Start кнопку "Пуск", а затем выберите Параметры>> системы
Приступим к установке.

                                    Настройка переменных среды

Мы установили, точнее распаковали, компилятор. Теперь его нужно настроить: добавить путь к нему в переменных окружения, которые отвечают за директории по умолчанию.
Переменные среды́, или переменные окружения, — настройки, хранимые операционной системой. Например, в переменной COMPUTERNAME операционная система Windows хранит название компьютера. Любая
программа, работающая в Windows, может его узнать. При настройке компилятора будем использовать переменную PATH, которая отвечает за пути к системным программам (тем, которые могут быть вызваны
из любой директории).
Начнём настройку.

                                    Компиляция из командной строки
Мы включили в переменную PATH путь к нашему компилятору, теперь стало возможным использовать его, находясь в любой папке Windows. Вы можете самостоятельно убедиться в этом, если откроете
стандартный терминал (командную строку) Windows и наберёте в ней g++.

Несколько полезных команд для работы в командной строке Windows:
    ● cd (change directory) — смена текущей директории в командной строке (в Linux и подобных системах есть такая же команда);
    ● dir (directory) — просмотр содержимого текущей директории (для Linux и подобных систем — команда ls);
    ● copy — команда для копирования директорий и файлов в системе Windows;
    ● mkdir (make directory) — создание директории в текущей папке (в Linux и подобных системах есть такая же команда);
    ● del (delete) — удаление одного или нескольких файлов (в Linux — команда rm);
    ● rmdir (remove directory) — удаление папок с диска вместе с содержимым (в Linux и подобных системах есть такая же команда);
    ● ren (rename) — переименовать файл или каталог (в Linux — команда rename);
    ● move — переместить файл или каталог, также используется для переименования (в Linux — команда mv).

Это основной, но далеко не полный перечень команд. Об остальных командах:

    ● Windows: Команды Windows (https://learn.microsoft.com/ru-ru/windows-server/administration/windows-commands/windows-commands) | Microsoft Learn (https://learn.microsoft.com/ru-ru/windows-
      server/administration/windows-commands/windows-commands)
    ● Linux:
Основные linux-команды для новичка (https://habr.com/ru/articles/501442/)
Архивы Команды - Losst (https://losst.pro/commands)
Попробуем скомпилировать примерный файл из командной строки.

                                    Выводы
Вы научились устанавливать и настраивать компилятор, запускать терминал в операционной системе и использовать в нём основные команды.
Рекомендуем дополнительные материалы:
● Цикл статей по Windows PowerShell (https://habr.com/ru/companies/ruvds/articles/487876/)
● Как освоить Vim? (https://habr.com/ru/companies/ruvds/articles/544160/)
И полезную литературу по теме:
● Таненбаум Э. С., Бос Х. «Современные операционные системы». (https://habr.com/ru/companies/piter/articles/258275/)
Немет Эви, Хейн Трент Р., Снайдер Гарт. «Unix и Linux. Руководство системного администратора» (https://www.labirint.ru/books/749458/)
