Тип данных float
Дорожные камеры

Цель задания
Научиться работать с вещественными числами, используя тип данных float.

Задача 1. Орехи
Араик Вачаганович торгует на рынке орехами и сухофруктами. Товары продаются на развес, у каждого есть цена за 100 грамм. Араик пользуется механическими весами с гирями, поэтому каждый раз рассчитывает итоговую стоимость продажи на бумаге или в уме. Это неудобно: например, если покупатель хочет 265 грамм грецких орехов, а 100 грамм стоят 600 рублей, приходится умножать и делить в столбик. Напишите простую программу в помощь Араику: он вводит цену товара за 100 грамм и итоговый вес покупки, а программа выдаёт стоимость покупки указанного веса.

Задача 2. ЗОЖ
Лена решила следить за питанием и вести учёт потребляемых белков и углеводов. На этикетках продуктов указано содержание белков и углеводов на 100 грамм продукта, но обычно упаковка весит меньше или больше 100 грамм. Напишите программу, которая принимает на вход информацию с упаковки: количество белков и углеводов на 100 грамм и массу нетто продукта. На выходе программа сообщает Лене, сколько белков и углеводов содержится в упаковке с продуктом этого веса.

Задача 3. Постоянный покупатель
Иногда к Араику Вачагановичу приходят постоянные покупатели, для которых он делает скидку. Для каждого такого клиента скидка своя. Модифицируйте программу из задачи «Орехи»: Араик будет вводить цену товара за 100 грамм, вес покупки и размер скидки в процентах, а программа должна выводить итоговую стоимость.

Приведение типов между int и float
Аттракцион
Дорожные камеры

Цель задания
Освоить приёмы работы с целыми и дробными числами и механизмы приведения типов.

Задача 1. Ку!
Общеизвестно, что на планете Плюк можно купить гравицапу за пол-КЦ или, что то же самое, 2 200 чатлов. Причем чатлы неделимы и всегда являются целым числом. Напишите простую программу-конвертер валют. В программу вводится количество чатлов, а она сообщает, сколько это КЦ и сколько гравицап можно купить на эту сумму. Обеспечьте контроль ввода.

Задача 2. Компьютерное зрение
Вы участвуете в разработке искусственного интеллекта, который играет в шахматы на доске размером 0,8 х 0,8 метра. Робот смотрит камерой на доску и видит расположение фигур в вещественных числах с высокой точностью. Напишите программу: после ввода вещественных координат шахматной фигуры программа должна определить, в какой клетке доски находится эта фигура. Каждая клетка доски имеет размер 10х10 сантиметров и целочисленные координаты, состоящие из двух чисел. Например, левая верхняя клетка имеет целые координаты (0, 0), справа от неё клетка (1, 0), а снизу (0, 1). Обеспечьте контроль ввода.
Пример
Ввод:

Введите местоположение фигуры:
0.731;
0.149.

Вывод:
Фигура находится в клетке (7, 1).

Задача 3. Метеостанция
Для удобства работы сотрудников международной метеостанции каждый день нужно распечатывать различные таблицы соответствия градусов по шкалам Цельсия и Фаренгейта. Напишите программу, которая принимает на вход три целых числа в градусах Цельсия: нижняя граница температуры, верхняя граница температуры и шаг. Программа выводит на экран таблицу соответствия градусов Цельсия градусам Фаренгейта от нижней до верхней границы с указанным шагом. Обеспечьте контроль ввода. Верхняя граница должна печататься, даже если последний шаг «перепрыгнул» её. Известно, что 0 °С соответствует 32 °F, а каждый градус Цельсия эквивалентен 1,8 градусам Фаренгейта.
Пример
Ввод:

Нижняя граница: 0.
Верхняя граница: 40.
Шаг: 20.

Вывод:

C F
0 32
20 68
40 104


Задача 4. Аккуратность
Робот из задачи «Компьютерное зрение» верно определяет клетку, на которой стоят фигуры. Но соперник-человек может поставить фигуру не по центру клетки, а со смещением. Если во время игры такое смещение станет велико, робот не поймёт, в какой клетке стоит фигура. Чтобы избежать этого, робот должен поправлять фигуры на доске, выставляя их по центру клетки. Модифицируйте программу «Компьютерное зрение», чтобы она выдавала не только номера клетки с фигурой, но и две вещественные поправки: показывала, как передвинуть фигуру по горизонтали и вертикали, чтобы она встала по центру своей клетки. Обеспечьте контроль ввода.

Пример
Ввод:

Введите местоположение фигуры:
0.731;
0.167.

Вывод:

Фигура находится в клетке (7, 1).
Поправьте положение фигуры на (0.019, -0.017).


Стандартные математические функции
GPS-навигатор
Радар
Список математических функций

Цель задания
Научиться использовать математические функции из стандартной библиотеки языка С++ в задачах с вещественными числами.

Задача 1. Ход конём
В рамках разработки шахматного искусственного интеллекта стоит новая задача. По заданным вещественным координатам коня и второй точки программа должна определить, может ли конь ходить в эту точку. Используйте как можно меньше конструкций if и логических операторов. Обеспечьте контроль ввода.

Пример
Ввод:

Введите местоположение коня:
0.071;
0.118.
Введите местоположение точки на доске:
0.213;
0.068.

Вывод:

Конь в клетке (0, 1). Точка в клетке (2, 0).
Да, конь может ходить в эту точку.

Задача 2. Автопилот
Одна из базовых частей программы автопилота пассажирских самолётов — контроль угла тангажа. Угол тангажа — это угол между продольной осью самолёта и горизонтом. Если тангаж положительный, нос самолёта смотрит вверх, если отрицательный, нос смотрит вниз и самолёт пикирует. При больших и малых углах тангажа можно потерять управление.
У самолёта SKB-1 допустимый угол тангажа лежит в пределах от -0,28 до 0,28 радиан. Вам поручено написать код, который проверяет, лежит ли введённый пользователем угол в этих пределах. Пользователь вводит угол в градусах. Используйте как можно меньше конструкций if. Обеспечьте контроль ввода.

Примеры
Ввод:
Введите угол тангажа в градусах: -28.
Вывод:
Угол небезопасен!
Ввод:
Введите угол тангажа в градусах: 724.
Вывод:
Угол безопасен.

Задача 3. Лифт
В Объединённых Арабских Эмиратах находится самый высокий небоскрёб Земли — Burj Khalifa. Он оборудован скоростными пассажирскими лифтами, но вот беда: иногда они дают сбой и застревают между этажами. В этом случае известно число H — высота пола остановившейся кабины лифта над уровнем земли. Чтобы команда лифтёров знала, куда ей ехать, шейх поручил вам написать программу, которая по известному H определяет, на каком этаже находится большая часть кабины. Известно, что расстояние между этажами Burj Khalifa равно 3,975 м, а этаж на уровне земли имеет номер 1. На ввод программа принимает вещественное число H, на экран выводит целое число — номер этажа. Не используйте при решении условный оператор, кроме как для обеспечения контроля ввода.

Задача 4. Убийца Photoshop
Вы разрабатываете новый крутой графический редактор. Один из инструментов редактора позволяет делать градиент — плавный переход между двумя точками разной яркости. Яркость точки определяется целым числом от 0 до 255, где 0 — чёрный, 255 — белый, а всё, что между ними — оттенки серого.
Напишите код для расчёта яркости точки градиента между двумя заданными точками. Пользователь вводит яркость левой границы градиента, потом яркость правой границы и параметр: число от 0 до 1, которое означает интересующую нас точку. Например, если параметр равен 0.5, то искомая точка находится ровно посередине между левой и правой границами, если параметр равен 0, то искомая точка совпадает с левой границей, и, наконец, если параметр равен 1, то искомая точка совпадает с правой границей. Программа должна вывести число — яркость искомой точки. Обеспечьте контроль ввода.

Пример
Ввод:

Введите яркость левой границы градиента: 10.
Введите правую границу градиента: 255.
Введите положение точки между границами: 0.7.

Вывод:
Яркость точки: 181.5.

Практическая работа
В практической работе есть:
Обязательные задачи помогут проверить, как вы усвоили материал модуля. Их нужно сдать на проверку куратору.
Дополнительные задачи подойдут тем, кто хочет ещё немного потренироваться, решая задачки по программированию. Вы также можете отправлять их на проверку и получать обратную связь куратора, хотя это необязательно.

Цели практической работы
• Познакомиться с вещественным типом данных float.
• Попробовать на практике использовать математические функции из стандартной библиотеки.
• Реализовать алгоритмы на числах с плавающей точкой.

Что входит в практическую работу
Обязательные задачи:
1. Космический симулятор.
2. Immolate Improved!
3. Игрушечная история.
4. Убийца Steam.
5. Кенийский бегун.
6. Маятник.
Дополнительные задачи:
7. Друзья Оушена*.
8. Биолаборатория 2.0*.
9. Яйца*.
10. Тяжело в учении, легко в бою*.

Задание 1. Космический симулятор
Что нужно сделать
Вы пишете симулятор космических полётов. Ваш звездолёт массой m килограмм включает двигатель с силой тяги F ньютонов на t секунд. Напишите программу, которая по заданным F, m и t покажет, на каком расстоянии от первоначального положения окажется космический корабль через t секунд. Обеспечьте контроль ввода.
Примечание: космический корабль находится в открытом космосе.
Напоминаем, что расстояние можно рассчитать по формуле:

Рекомендации по выполнению
Для операции возведения в степень удобно использовать функцию std::pow.

Что оценивается
• Правильно использована формула.
• В расчётах используются переменные типа float.

Задание 2. Immolate Improved!
Что нужно сделать
Мы придумываем фэнтезийную онлайн-игру в жанре RPG. В орка стреляют огненными шарами разной степени мощности, но у него есть очки здоровья и показатель сопротивляемости магии. Очки здоровья, сопротивляемость магии и мощность огненного шара — это вещественные числа от нуля до единицы включительно. Чем больше мощность, тем больше урон здоровью, но чем больше сопротивляемость магии, тем урон меньше. Например, если сопротивляемость равна нулю (0%), то будет нанесён урон, равный мощности огненного шара. Если сопротивляемость равна единице (100%), урон будет равен нулю, даже если мощность заклинания максимальна.

Напишите программу, в которой пользователь сначала задаёт количество здоровья и сопротивляемость магии орка, а после стреляет в него огненными шарами разной мощности, пока орк не погибнет. Мощность удара вводится с клавиатуры с каждым выстрелом. После каждого заклинания программа выводит на экран итоговый урон от удара и оставшиеся очки здоровья орка. Показатель сопротивляемости магии не изменяется при попадании. Обеспечьте контроль ввода.

Обратите внимание, что сопротивляемость обозначает только долю от повреждения, которая приходится на орка. Пример:
Урон 0.1, сопротивляемость 0.5, по орку будет нанесено 0.05 урона;
Урон 0.2, сопротивляемость 0.5, по орку будет нанесено 0.1 урона;
Урон 1, сопротивляемость 0.2, по орку будет нанесено 0.8 урона.

Рекомендации по выполнению
Для решения использовать цикл while.

Что оценивается
Все величины должны измеряться в одной шкале — от 0 до 1.
Мощность удара считается с учётом сопротивляемости.

Задание 3. Игрушечная история
Что нужно сделать
Вы решили открыть бизнес по производству игровых деревянных кубиков для детей. Вы узнали, что лучше всего продаются кубики со стороной 5 см в наборах по несколько штук, причём кубиков в наборе должно быть достаточно, чтобы сложить из них один большой куб. Для изготовления кубиков к вам в мастерскую поступают деревянные бруски в форме прямоугольных параллелепипедов любых размеров.

Для оптимизации бизнес-процессов напишите программу, которая по заданным размерам исходного бруска определяет, сколько кубиков из него можно изготовить, можно ли из них составить набор для продажи и если можно, то максимальное число кубиков в этом наборе. Все кубики должны быть из цельного дерева без использования клея. Размеры бруска — вещественные числа. Обеспечьте контроль ввода.

Например:
Из бруска 20x35x5 можно изготовить 28 кубиков.

Из 28 кубиков можно собрать набор из 27 кубиков.

Пример выполнения
Введите размеры бруска:
X: 5
Y: 35,76
Z: 35,05
Вывод:
Из этого бруска можно изготовить 49 кубиков.
Из них можно составить набор из 27 кубиков.

Рекомендации по выполнению
• Кубики изготавливаются только цельными, не из нескольких частей бруска. Минимальный размер бруска — 5x5x5 см. Подумайте как проще разбить брусок на такие кубики.
• Минимальный размер набора — 2x2x2 = 8 кубиков.

Что оценивается
• Правильно считается количество кубиков, которое можно получить из бруска.
• Количество кубиков в наборе не превышает количество кубиков, полученное из бруска.

Задание 4. Убийца Steam
Что нужно сделать
Вы пишете программу-инсталлятор для компьютерной игры. Пока обновление скачивается, пользователю нужно показать прогресс загрузки, чтобы он мог решить, подождать ему у экрана компьютера или заварить чай.
Напишите программу, принимающую на вход размер файла обновления в мегабайтах и скорость интернет-соединения в мегабайтах в секунду. В каждую секунду программа показывает, сколько процентов от общего объёма обновления уже скачано, до тех пор, пока файл не загрузится. После установки обновления программа выводит время в секундах, которое заняло скачивание. Обеспечьте контроль ввода.
Пример выполнения
Ввод:

Укажите размер файла для скачивания: 123
Какова скорость вашего соединения? 27

Вывод:

Прошло 1 сек. Скачано 27 из 123 МБ (21%).
Прошло 2 сек. Скачано 54 из 123 МБ (43%).
Прошло 3 сек. Скачано 81 из 123 МБ (65%).
Прошло 4 сек. Скачано 108 из 123 МБ (87%).
Прошло 5 сек. Скачано 123 из 123 МБ (100%).

Рекомендации по выполнению
Обратите внимание, что проценты это целые числа.

Что оценивается
• Программа работает корректно с любыми заданными значениями.
• Количество процентов не вводит в заблуждение пользователя. Например, не должно выводиться 100%, если файл ещё не загрузился.

Задание 5. Кенийский бегун
Что нужно сделать
Самуэль родился в Кении, и когда он немного подрос, то решил сделать карьеру профессионального бегуна. Во время тренировок на стадионе он стал запоминать свой темп на каждом километре с помощью простых наручных часов с секундной стрелкой. После тренировки он хотел бы узнать свой средний темп бега, но не может этого сделать: в Кении дети, решившие стать бегунами, обычно не ходят в школу. Помогите Самуэлю.
Напишите программу для расчёта среднего темпа бега. Темп измеряется в секундах на километр и означает количество времени, которое бегун потратит на преодоление одного километра. Программа должна получить на вход количество километров, покрытое за тренировку, и темп в секундах на каждый из этих километров. На выходе программа выводит на экран средний темп в минутах и секундах за всю тренировку. Обеспечьте контроль ввода.

Пример выполнения
Ввод:

Привет, Сэм! Сколько километров ты сегодня пробежал? 6
Какой у тебя был темп на километре 1? 305
Какой у тебя был темп на километре 2? 291
Какой у тебя был темп на километре 3? 343
Какой у тебя был темп на километре 4? 255
Какой у тебя был темп на километре 5? 279
Какой у тебя был темп на километре 6? 312

Вывод:
Твой средний темп за тренировку: 4 минуты 58 секунд.

Рекомендации по выполнению
Чтобы добиться требуемого результата, необходимо воспользоваться функцией округления.

Что оценивается
Важно, чтобы время среднего темпа было выведено в формате «минуты и секунды», как в примере.

Задание 6. Маятник
Что нужно сделать
Известно, что амплитуда качающегося маятника с каждым разом затухает на 8,4% от амплитуды прошлого колебания. Если качнуть маятник, он, строго говоря, никогда не остановится: его амплитуда будет уменьшаться до тех пор, пока мы не сочтём такой маятник остановившимся. Напишите программу, определяющую, сколько раз качнётся маятник, прежде чем он, по нашему мнению, остановится. Программа получает на вход начальную амплитуду колебания в сантиметрах и конечную амплитуду его колебаний, которая считается остановкой маятника. Обеспечьте контроль ввода.
Рекомендации по выполнению
Считаем, что затухание происходит на каждое качание.

Что оценивается
• Программа правильно считает количество затуханий.
• Цикл не бесконечный.

Задание 7. Друзья Оушена* (дополнительное задание)
Что нужно сделать
Банковский сейф оборудован механическим кодовым замком, состоящим из N крутящихся ручек, каждая из которых имеет K положений. Существует только одна комбинация положений всех N ручек, которая открывает сейф. Чтобы его открыть, достаточно перебрать все существующие комбинации. На проверку одной комбинации уходит в среднем T секунд, где T — вещественное число. Напишите программу, которая по заданным N, K и T определяет время, которое потребуется для перебора всех комбинаций и гарантированного открытия сейфа. Не используйте циклы. Обеспечьте контроль ввода.

Рекомендации по выполнению
Для решения этого задания нужно вспомнить комбинаторику.

Что оценивается
Правильно определяется количество комбинаций.

Задание 8. Биолаборатория 2.0* (дополнительное задание)
Что нужно сделать
Благодаря вашей помощи компания «Терран Биотех» вышла на финишную прямую в борьбе со всемирной эпидемией коринебактерий. Однако прошлая симуляция была недостаточно точной, да и новая версия антибиотика работает по-другому.
В чашку Петри добавляется W капель воды, D капель чистого антибиотика и подселяется N коринебактерий. Известно, что каждую минуту количество бактерий изменяется прямо пропорционально концентрации антибиотика в растворе по формуле Nnew = 2 × Nold − Nold × D / W, где Nold — количество коринебактерий минуту назад, Nnew — их новое количество, а D / W — концентрация действующего антибиотика. При этом каждую минуту 20% от всего количества антибиотика разлагается и больше не действует.

Напишите программу, которая получает на вход значения W, D и Nold и симулирует процесс в течение 20 минут, для каждой минуты выводя на экран текущую концентрацию антибиотика и количество живых коринебактерий в чашке Петри. Обеспечьте контроль ввода.

Что оценивается
• Количество измеряется в целых числах.
• Ничто не уходит в отрицательные значения.
• Цикл не бесконечный.

Задание 9. Яйца* (дополнительное задание)
Что нужно сделать
В рамках программы колонизации Марса компания «Спейс Инжиниринг» вывела особую породу черепах, которые должны размножаться, откладывая яйца в марсианском грунте. Откладывать яйца слишком близко к поверхности опасно из-за радиации, а слишком глубоко опасно из-за давления грунта и недостатка кислорода. Вообще, факторов много, но специалисты проделали большую работу и предположили, что уровень опасности для черепашьих яиц рассчитывается по формуле D = x^3 − 3x^2 − 12x + 10, где x — глубина кладки в метрах, а D — уровень опасности в условных единицах. Для тестирования гипотезы нужно взять пробу грунта на безопасной, согласно формуле, глубине.
Напишите программу, находящую такое значение глубины х, при котором уровень опасности наиболее близок к нулю, учитывая допустимое отклонение. На вход программе подаётся максимально допустимое отклонение уровня опасности от нуля, а программа должна рассчитать приблизительное значение х, удовлетворяющее этому отклонению. Известно, что глубина точно больше нуля и меньше четырёх метров.
Обеспечьте контроль ввода.

Пример выполнения
Введите максимально допустимый уровень опасности: 0,01
Вывод:
Приблизительная глубина безопасной кладки: 0,732422 метра

Рекомендации по выполнению
• Отрицательный уровень опасности — это тоже плохо. Нужно найти наиболее близкий к нулю уровень опасности.
• Здесь не обязательно считать корни кубического уравнения. Достаточно найти решение на отрезке от 0 до 4.

Что оценивается
Для поиска решения не используется полный перебор.

Задание 10. Тяжело в учении, легко в бою* (дополнительное задание)
Что нужно сделать
Вы встретились со своим старым другом, который тоже изучает программирование, правда, в другом учебном заведении. За чашкой кофе он пожаловался, что сумасбродный препод дал задание написать программу, которая из двух введённых чисел определяет наибольшее, не используя при этом условных операторов и циклов. Радуясь, что на вашем курсе такого не требуют, вы всё-таки решаете помочь своему другу. Напишите для него эту программу.

Рекомендации по выполнению
Попробуйте решить это задание с помощью арифметических операций и простых математических функций.

Что оценивается
Решение не является просто функцией std::max.

Критерии оценки работы
1. Программы запускаются и корректно работают, нет синтаксических ошибок.
2. Имена переменных корректные, отражают суть хранимых данных.
3. Создан текстовый интерфейс для всех программ.
4. Для всех заданий обеспечен контроль ввода, который обусловлен логикой работы программы. Допускается отсутствие контроля на переполнение типа.
5. Выполнено шесть и более заданий.

Как отправить работу на проверку
В форме ниже прикрепите ссылки на ваши проекты в repl.it — по одной на каждое задание.