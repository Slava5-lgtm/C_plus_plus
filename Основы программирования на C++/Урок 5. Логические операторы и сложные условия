Урок 5.                                 Логические операторы и сложные условия

                                                        Разбор ДЗ прошлого урока
                                                                ЗАДАЧА -1       (Напишите программу, которая проверяет, делится ли одно число на другое без остатка.) 

#include <iostream>

int main() {
  int a;
  int b;
  std::cout << " Введите два числа:\n";
  std::cin >> a >> b; // Вот так можно вводить два числа в одной строке

  if (a / b * b == a) {
    std::cout << " Да делиться без остатка";
  } else {
    std::cout << " Нет не делиться без остатка";
  }
}

                                                                    Резултат

Введите два числа:
15 3
Да делиться без остатка

                                                                    Резултат

Введите два числа:
16 3
Нет не делиться без остатка

Тоже самая можно было написать кароче использовая ОПЕРАТОР %

#include <iostream>

int main() {
  int a;
  int b;
  std::cout << "Введите два числа:\n";
  std::cin >> a >> b; // Вот так можно вводить два числа в одной строке

  if (a % b == 0) {
    std::cout << "Да делиться без остатка";
  } else {
    std::cout << "Нет не делиться без остатка";
  }
}

                                                                    Резултат

Введите два числа:
15 3
Да делиться без остатка

                                                                    Резултат

Введите два числа:
16 3
Нет не делиться без остатка

                                                                ЗАДАЧА -2        (Вычисляющую сумму налога по прогрессивной шкале в зависимости от полученного заработка:
                                                                                  13% — на доход до 10 000, 20% — на доход от 10 000 до 50 000, 30% — на доход выше
                                                                                  50 000. Однако во многих странах, использующих такую шкалу, эта сумма вычисляется
                                                                                  более сложным способом: налоговая ставка 30% на доход выше 50 000 означает, что 30%
                                                                                  уплачивается не со всей суммы, а лишь с той её части, которая превосходит 50 000.
                                                                                  Аналогично: ставка 20% на доход от 10 000 до 50 000 обязывает уплатить 20% лишь с той
                                                                                  части суммы, которая превосходит 10 000, но не превосходит 50 000. Так, например, с
                                                                                  дохода 100 000 придётся заплатить такой налог:
                                                                                  30% * (100 000 – 50 000) + 20% * (50 000 – 10 000) + 13% * 10 000 = 15 000 + 8000 +
                                                                                  + 1300 = 24 300. С дохода 30 000: 20% * (30 000 – 10 000) + 13% * 10 000 = 4000 +
                                                                                  + 1300 = 5300. Напишите программу, которая спрашивает у пользователя его доход и
                                                                                  рассчитывает сумму налога для него по вышеописанным правилам.)

#include <iostream>

int main() {
  int profit;
  std::cout << "Введите размер прибыли: ";
  std::cin >> profit;
  
  // завели переменую tax для сохронения суммы налоа до начало проверки всех условий и будем формировать эту сумму по частям
  int tax = 0;
  // снаало проверяем
  // если доходбыл свыше 50000 то спишим с той его части превышает 50000 нужную сумму налога и прибавим ее к tax
  if (profit > 50000) {
  // то к налогу прибавим вот такое число (30% * (profit - 50000)) 
    tax += (profit - 50000) * 30 / 100;
  // обрати внимания если бы мы получили 70000 то этот налог подсичвлся бы толкько с 20000 то есть с той части суммы которая превосходит 50000. Для 20000 из 70000 налог
  // мы уже подчитали, теперь нужно подчитать налог для 50000. Поэтому будим считать что, 50000 у нс и осталось и присваеваем к переменой profit = 50000
    profit = 50000;
  }
  // теперь спишим налог с той оставшейся части дохода которые выходила за пределы 10000
  if (profit > 10000) {
  // мы обработали всю часть дохода
    tax += (profit - 10000) * 20 / 100;
    profit = 10000;
  }
// осталось добавить к сумме налога ту часть каторая получаеться из оставшейся суммы 10000
  tax += profit * 13 / 100;

  std::cout << "Размер налога равен: " << tax << "\n";
}

                                                                    Резултат

Введите размер прибыли: 100000
Размер налога равен: 24300

                                                                    Резултат

Введите размер прибыли: 30000
Размер налога равен: 5300


                                                        Вложенные конструкции if

Внутри блоки if может быть любой код в том числе там может быть еще один блок у словием if. Такие конструкции когда один условный блок внутри другого мы будим называть
вложеные условия разбереи пример:

                                                                ЗАДАЧА -3        (Пусть пользрватель вводит два числа, а мы хитим найти максимальное из них)


#include <iostream>

int main() {
  int a;
  int b;
  std::cout << "Введите два числа:\n";
  std::cin >> a >> b;

  if (a > b) {
    std::cout << "Максимальное число: " << a << "\n";
  } else{
    std::cout << "Максимальное число: " << b << "\n";
  }
}

                                                                    Резултат

Введите два числа:
12 15
Максимальное число: 15

                                                                    Резултат

Введите два числа:
15 12
Максимальное число: 15

Теперь предположим что пользователь вводит три числа, а мы по попрежниму хитим найти максимальное из них. Довольно легко понять, что одним сравнением тут не обойтись 

#include <iostream>

int main() {
  int a;
  int b;
  int c;
  std::cout << "Введите три числа:\n";
  std::cin >> a >> b >> c;

  if (a > b) {
    if (a > c){ 
    std::cout << "Максимальное число равно: " << a;
  } else {
    std::cout << "Максимальное число равно: " << c;
  }

  } else {
    if (b > c) {
      std::cout << "Максимальное число равно: " << b;
    } else {
      std::cout << "Максимальное число равно: " << c;
    }
  } 
}

                                                                    Резултат

Введите три числа:
1 2 3
Максимальное число равно: 3

                                                                    Резултат
Введите три числа:
1 3 2
Максимальное число равно: 3

                                                                    Резултат
Введите три числа:
3 1 2
Максимальное число равно: 3


                                                        Логические операторы и сложные условия (И ИЛИ)

Мы писали програму которая при веденых трех чисел находила самое большое.

int main() {
  int a;
  int b;
  int c;
  std::cout << "Введите три числа:\n";
  std::cin >> a >> b >> c;

  if (a > b) {
    if (a > c){ 
    std::cout << "Максимальное число равно: " << a;
  } else {
    std::cout << "Максимальное число равно: " << c;
  }

  } else {
    if (b > c) {
      std::cout << "Максимальное число равно: " << b;
    } else {
      std::cout << "Максимальное число равно: " << c;
    }
  } 
}

Когда много блока кода вложено друг в друга такой код сложно читать. Хорошим стилем считаеться не создовать вложеный блок если можно обойтись без него.

Мы упрости нашу програму так что бы не было вложеных блоков кода. И сделаем мы это при помощи сложных условий. Мы учитываем несколько факторов когда принимаем решения.
Обычно при формюлировки таких правил для себя мы использум слова И ИЛИ. Когда мы соединяем два простых условия союзом И - это означает что мы требуем одновременог
выполнения их обоих, когда соединяем союзом ИЛИ - это значит что нам достаточно ваполнения хотя бы одного из них. В языке С++ для их обозночения есть специальные
обозначения.

                                                                ЛОГИЧЕСКИЕ ОПЕРАТОРЫ

                                                                &&  - И
                                                                ||  - или

Мы можем состовлять условия вот они:

if (a > 3 && b != 5)  - (а) больше трех и (b) не равно пяти. Если хоть одно из двух частей (((a > 3) - первая часть) ((b != 5) - вторая часть)) условий не выполнено то
условия в целом будет считатья невыполнено

А если мы напишим так:

if (a > 3 || b != 5)  -   то это будет означать что условия будет выполнено когда (а больше трех) или (b не равно пяти). Но есле (а больше трех), а (b не равно пяти)
то условия будет считаться не выполнено

В математике операция И называеться - Конъюнкция (Конъюнкция — логическая операция, ставящая в соответствие каждым двум высказываниям новое высказывание, являющееся
                                                  истинным тогда и только тогда, когда оба исходных высказывания истинны. Для записи конъюнкции используются следующие
                                                  знаки: ∧, •, И, &. Например: А ∧ В, А • В, а и в, А & Б.).

А операция || называеться           - Дизъюнкция (Дизъюнкция — это логическая операция, которая объединяет два высказывания и возвращает значение истины, если хотя бы
                                                  одно из этих высказываний истинно. То есть в логике мы эти высказывания складываем, чтобы получить новое высказывание,
                                                  которое будет соответствовать хотя бы одному из поставленных условий или сразу двум.).

Вернермся к задачи про максимумы:



#include <iostream>

int main() {
  int a;
  int b;
  int c;
  std::cout << "Введите три числа:\n";
  std::cin >> a >> b >> c;

 // Давайте для примера оставит условия являеться ли (а) максимумом трех чисел
  // если a > d и a > c
  if (a > b && a > c) {
  // то
    std::cout << "Максимальное число равно: " << a;
  // разберем остольные случаи когда максимум b и с
  // пишим иначе (else if) и второе условмя (b > a и b > c)
  } else if (b > a && b > c) {
    std::cout << "Максимальное число равно: " << b;
  // и также пишем третие условия
  } else if (c > a && c > b) {
    std::cout << "Максимальное число равно: " << c;
  }
}

А эту часть можно удолить

{

  if (a > b) {
    if (a > c){ 
    std::cout << "Максимальное число равно: " << a;
  } else {
    std::cout << "Максимальное число равно: " << c;
  }

  } else {
    if (b > c) {
      std::cout << "Максимальное число равно: " << b;
    } else {
      std::cout << "Максимальное число равно: " << c;
    }
  } 
}

                                                                    Резултат

Введите три числа:
1 2 3
Максимальное число равно: 3

Но при такой комбинации она не работает  (std::cout << "Введите три числа:\n"; 1 1 0):

                                                                    Резултат

Введите три числа:
1 1 0

Значит это програма работает не всегда правильно. Мы упустили случай когдамаксимальное чило одному из оставшихся чисел. Что бы прграмма начала работать правильно и в
этих случаях тоже поменяем все строгии не равенство на нестрогии тоесть заменим все знаки > на знаки >=

#include <iostream>

int main() {
  int a;
  int b;
  int c;
  std::cout << "Введите три числа:\n";
  std::cin >> a >> b >> c;

  // если a > d и a > c
  if (a >= b && a >= c) {
  // то
    std::cout << "Максимальное число равно: " << a;
  // разберем остольные случаи когда максимум b и с
  // пишим иначе (else if) и второе условмя (b > a и b > c)
  } else if (b >= a && b >= c) {
    std::cout << "Максимальное число равно: " << b;
  // и также пишем третие условия
  } else if (c >= a && c >= b) {
    std::cout << "Максимальное число равно: " << c;
  }
}


                                                                    Резултат

А тк все хорошо (std::cout << "Введите три числа:\n"; 8 8 5)

Введите три числа:
8 8 5
Максимальное число равно: 8

Но и здесь можно упростить если максимум не  (a) и не (b) то максимум являеться (с). И тогда это можно дополнительно не проверять (строка 334(if (c >= a && c >= b)))
кажеться мы упростили д придела. А вот и нет эту задачу можно было бы решить и без сложных конструкций и без сложных условий.

                                                    Для этого надо было завести еще оду переменую

#include <iostream>

int main() {
  int a;
  int b;
  int c;
  std::cout << "Введите три числа:\n";
  std::cin >> a >> b >> c;

  int max =a;
  if (b > max) max = b;
  if (c > max) max = c;

  std::cout << "Максимальное число: " << max;
}

                                                                    Резултат

Введите три числа:
9 9 5
Максимальное число: 9

Кроме операции И и ИЛИ есть и третия логическая операция она называеться ОТРИЦАНИЯ. Отрицания некоторого условия это такое условие которое ЛОЖНО когда исходно условное
истина и наоборот. Например если у нас есть переменая Х. Tо отрицания условия Х > 0 это условия Х < или = 0

Для записи отрицания применяеться !

if (!(x > 0)) это запись обозночает тоже самое if (x <= 0) скобки вокруг икс больше нуля обязательно нужны, что бы трецания относилось ко всей записи (x > 0), а не 
только к (х). Если записать такую запись (!x > 0) без скобок она будет иметь савсем другой смысл
